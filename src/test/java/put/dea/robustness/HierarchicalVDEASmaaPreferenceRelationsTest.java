package put.dea.robustness;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class HierarchicalVDEASmaaPreferenceRelationsTest extends HierarchicalVDEATestBase {
    @Test
    public void verifyPeoisAtIndexLevel() {
        var expectedPeoi = new double[][]{
                new double[]{1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8, 1.0, 1.0},
                new double[]{1.0, 1.0, 1.0, 1.0, 1.0, 0.4, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0},
                new double[]{0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.2, 0.4, 1.0, 1.0, 1.0, 1.0, 0.0, 0.6, 0.8},
                new double[]{0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0},
                new double[]{1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0},
                new double[]{1.0, 0.6, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0},
                new double[]{0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.8, 0.6, 1.0, 1.0, 1.0, 1.0, 0.2, 1.0, 1.0},
                new double[]{0.0, 0.0, 0.8, 1.0, 0.0, 0.0, 0.2, 1.0, 0.8, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0},
                new double[]{0.0, 0.0, 0.6, 1.0, 0.0, 0.0, 0.4, 0.2, 1.0, 1.0, 1.0, 0.8, 1.0, 0.0, 1.0, 1.0},
                new double[]{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0},
                new double[]{0.0, 0.0, 0.0, 0.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                new double[]{0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.2, 1.0, 1.0, 1.0, 1.0, 0.0, 0.4, 0.6},
                new double[]{0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.2, 0.6},
                new double[]{0.2, 0.0, 1.0, 1.0, 0.0, 0.0, 0.8, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0},
                new double[]{0.0, 0.0, 0.4, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.6, 0.8, 0.0, 1.0, 0.8},
                new double[]{0.0, 0.0, 0.2, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.4, 0.4, 0.0, 0.2, 1.0}
        };

        verifyPeois("index", expectedPeoi);
    }

    private void verifyPeois(String hierarchyLevel, double[][] expected) {
        var smaa = new HierarchicalVDEASmaaPreferenceRelations(
                SmaaTestUtils.NUMBER_OF_SAMPLES,
                SmaaTestUtils.getRandom());
        var actual = smaa.peoi(data, hierarchyLevel);
        Assertions.assertArrayEquals(expected, actual.toModelMatrix(0));

    }

    @Test
    public void verifyPeoisAtHealthLevel() {
        var expectedPeoi = new double[][]{
                new double[]{1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0},
                new double[]{0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0},
                new double[]{0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.6, 1.0, 1.0, 0.6, 0.0, 0.6, 1.0, 1.0},
                new double[]{0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.2, 0.0, 1.0, 0.2, 0.0, 0.0, 0.8, 0.4},
                new double[]{0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0},
                new double[]{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0},
                new double[]{0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.6, 0.6, 1.0, 0.2, 0.0, 0.2, 1.0, 1.0},
                new double[]{0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0},
                new double[]{0.0, 0.0, 0.4, 0.8, 0.0, 0.0, 0.4, 0.0, 1.0, 0.8, 1.0, 0.4, 0.0, 0.2, 1.0, 1.0},
                new double[]{0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.4, 0.0, 0.2, 1.0, 1.0, 0.4, 0.0, 0.2, 0.8, 0.8},
                new double[]{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                new double[]{0.0, 0.0, 0.4, 0.8, 0.0, 0.0, 0.8, 0.0, 0.6, 0.6, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0},
                new double[]{0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0},
                new double[]{0.0, 0.0, 0.4, 1.0, 0.0, 0.0, 0.8, 0.0, 0.8, 0.8, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0},
                new double[]{0.0, 0.0, 0.0, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2, 1.0, 0.0, 0.0, 0.0, 1.0, 0.4},
                new double[]{0.0, 0.0, 0.0, 0.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2, 1.0, 0.0, 0.0, 0.0, 0.6, 1.0}
        };

        verifyPeois("health_improvement", expectedPeoi);
    }

    @Test
    public void verifyPeoisAtFinancesLevel() {
        var expectedPeoi = new double[][]{
                new double[]{1.0, 0.0, 0.0, 0.4, 0.0, 0.0, 0.2, 1.0, 1.0, 1.0, 0.8, 0.0, 1.0, 0.2, 0.0, 1.0},
                new double[]{1.0, 1.0, 1.0, 1.0, 0.6, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0},
                new double[]{1.0, 0.0, 1.0, 0.6, 0.0, 0.0, 0.6, 1.0, 1.0, 1.0, 1.0, 0.8, 1.0, 1.0, 0.0, 1.0},
                new double[]{0.6, 0.0, 0.4, 1.0, 0.0, 0.0, 0.0, 0.8, 1.0, 1.0, 1.0, 0.4, 1.0, 0.8, 0.0, 1.0},
                new double[]{1.0, 0.4, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0},
                new double[]{1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0},
                new double[]{0.8, 0.0, 0.4, 1.0, 0.0, 0.0, 1.0, 0.8, 1.0, 1.0, 1.0, 0.8, 1.0, 0.8, 0.2, 1.0},
                new double[]{0.0, 0.0, 0.0, 0.2, 0.0, 0.0, 0.2, 1.0, 1.0, 1.0, 0.6, 0.0, 1.0, 0.0, 0.0, 1.0},
                new double[]{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.8},
                new double[]{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.4},
                new double[]{0.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.8},
                new double[]{1.0, 0.0, 0.2, 0.6, 0.0, 0.0, 0.2, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0},
                new double[]{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
                new double[]{0.8, 0.0, 0.0, 0.2, 0.0, 0.0, 0.2, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0},
                new double[]{1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.8, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0},
                new double[]{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2, 0.6, 0.2, 0.0, 1.0, 0.0, 0.0, 1.0}
        };

        verifyPeois("finances", expectedPeoi);
    }

    @Test
    public void verifyPeoisAtSatisfactionLevel() {
        var expectedPeoi = new double[][]{
                new double[]{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                new double[]{1.0, 1.0, 1.0, 1.0, 0.4, 0.8, 0.0, 1.0, 0.0, 1.0, 0.8, 1.0, 1.0, 0.0, 0.8, 0.0},
                new double[]{1.0, 0.0, 1.0, 1.0, 0.2, 0.2, 0.0, 1.0, 0.0, 1.0, 0.4, 0.4, 1.0, 0.0, 0.2, 0.0},
                new double[]{1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                new double[]{1.0, 0.6, 0.8, 1.0, 1.0, 0.8, 0.0, 1.0, 0.0, 1.0, 0.8, 1.0, 1.0, 0.0, 0.8, 0.0},
                new double[]{1.0, 0.2, 0.8, 1.0, 0.2, 1.0, 0.0, 1.0, 0.0, 1.0, 0.6, 0.6, 1.0, 0.0, 0.6, 0.0},
                new double[]{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.2, 1.0, 0.0},
                new double[]{1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.4, 0.0, 0.0, 0.0},
                new double[]{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2},
                new double[]{0.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
                new double[]{1.0, 0.2, 0.6, 1.0, 0.2, 0.4, 0.0, 1.0, 0.0, 1.0, 1.0, 0.6, 1.0, 0.0, 0.6, 0.0},
                new double[]{1.0, 0.0, 0.6, 1.0, 0.0, 0.4, 0.0, 1.0, 0.0, 1.0, 0.4, 1.0, 1.0, 0.0, 0.4, 0.0},
                new double[]{1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.6, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
                new double[]{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0},
                new double[]{1.0, 0.2, 0.8, 1.0, 0.2, 0.4, 0.0, 1.0, 0.0, 1.0, 0.4, 0.6, 1.0, 0.0, 1.0, 0.0},
                new double[]{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}
        };

        verifyPeois("satisfaction", expectedPeoi);
    }
}
