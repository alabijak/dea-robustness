package put.dea.robustness;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.stream.IntStream;

public class ImpreciseSmaaPreferenceRelationsTests extends ImpreciseCCRTestBase {
    @Test
    public void verifyPeois() {
        addWeightConstraints();
        var smaaEfficiency = new ImpreciseCCRSmaaPreferenceRelations(
                SmaaTestUtils.NUMBER_OF_SAMPLES,
                SmaaTestUtils.getRandom());

        var expectedDistribution = new double[][]{
                new double[]{1.0, 0.0, 0.4, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.4, 1.0, 1.0, 0.4, 0.0, 0.2, 1.0, 1.0, 0.4, 0.2, 0.4, 1.0, 1.0, 1.0, 1.0, 0.2, 0},
                new double[]{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8, 1.0, 1.0, 1.0, 1.0, 0.2, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8, 0},
                new double[]{0.6, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8, 0.6, 1.0, 1.0, 1.0, 0.0, 0.0, 0.8, 1.0, 0.4, 0.0, 0.4, 1.0, 1.0, 1.0, 1.0, 0.0, 0},
                new double[]{0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2, 0.0, 0.0, 0.0, 0},
                new double[]{0.0, 0.0, 0.0, 1.0, 1.0, 0.8, 0.4, 0.2, 1.0, 0.4, 0.0, 1.0, 0.8, 0.0, 0.0, 0.0, 0.6, 1.0, 0.2, 0.0, 0.0, 1.0, 1.0, 0.8, 0.4, 0.0, 0},
                new double[]{0.0, 0.0, 0.0, 1.0, 0.2, 1.0, 0.0, 0.0, 0.8, 0.0, 0.0, 1.0, 0.4, 0.0, 0.0, 0.0, 0.4, 0.8, 0.0, 0.0, 0.0, 1.0, 0.6, 0.4, 0.0, 0.0, 0},
                new double[]{0.0, 0.0, 0.0, 1.0, 0.6, 1.0, 1.0, 0.6, 1.0, 0.6, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.8, 1.0, 0.2, 0.0, 0.2, 1.0, 1.0, 1.0, 0.6, 0.0, 0},
                new double[]{0.0, 0.0, 0.0, 1.0, 0.8, 1.0, 0.4, 1.0, 0.8, 0.6, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.8, 1.0, 0.2, 0.0, 0.0, 1.0, 1.0, 1.0, 0.6, 0.0, 0},
                new double[]{0.0, 0.0, 0.0, 1.0, 0.0, 0.2, 0.0, 0.2, 1.0, 0.0, 0.0, 1.0, 0.4, 0.0, 0.0, 0.0, 0.0, 0.4, 0.2, 0.0, 0.0, 1.0, 0.4, 0.4, 0.0, 0.0, 0},
                new double[]{0.0, 0.0, 0.2, 1.0, 0.6, 1.0, 0.4, 0.4, 1.0, 1.0, 0.4, 1.0, 0.8, 0.4, 0.0, 0.2, 1.0, 1.0, 0.4, 0.2, 0.4, 1.0, 1.0, 1.0, 1.0, 0.2, 0},
                new double[]{0.6, 0.0, 0.4, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.6, 1.0, 1.0, 1.0, 1.0, 0.0, 0.4, 0.8, 1.0, 0.6, 0.0, 0.8, 1.0, 1.0, 1.0, 0.8, 0.0, 0},
                new double[]{0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8, 0.4, 0.4, 0.0, 0.0, 0},
                new double[]{0.0, 0.0, 0.0, 1.0, 0.2, 0.6, 0.0, 0.0, 0.6, 0.2, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.6, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.6, 0.4, 0.0, 0},
                new double[]{0.6, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.6, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.8, 1.0, 0.2, 0.0, 0.2, 1.0, 1.0, 1.0, 0.6, 0.0, 0},
                new double[]{1.0, 0.2, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8, 0.2, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8, 0},
                new double[]{0.8, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8, 0.6, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.4, 0.2, 0.6, 1.0, 1.0, 1.0, 1.0, 0.2, 0},
                new double[]{0.0, 0.0, 0.2, 1.0, 0.4, 0.6, 0.2, 0.2, 1.0, 0.0, 0.2, 1.0, 0.4, 0.2, 0.0, 0.0, 1.0, 1.0, 0.2, 0.0, 0.2, 1.0, 0.6, 0.4, 0.2, 0.0, 0},
                new double[]{0.0, 0.0, 0.0, 1.0, 0.0, 0.2, 0.0, 0.0, 0.6, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.4, 0.4, 0.0, 0.0, 0},
                new double[]{0.6, 0.0, 0.6, 1.0, 0.8, 1.0, 0.8, 0.8, 0.8, 0.6, 0.4, 1.0, 1.0, 0.8, 0.2, 0.6, 0.8, 1.0, 1.0, 0.0, 0.6, 1.0, 1.0, 1.0, 0.8, 0.0, 0},
                new double[]{0.8, 0.8, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8, 1.0, 1.0, 1.0, 1.0, 0.8, 0.8, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8, 0},
                new double[]{0.6, 0.0, 0.6, 1.0, 1.0, 1.0, 0.8, 1.0, 1.0, 0.6, 0.2, 1.0, 1.0, 0.8, 0.0, 0.4, 0.8, 1.0, 0.4, 0.0, 1.0, 1.0, 1.0, 1.0, 0.8, 0.0, 0},
                new double[]{0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.4, 0.2, 0.0, 0.0, 0},
                new double[]{0.0, 0.0, 0.0, 0.8, 0.0, 0.4, 0.0, 0.0, 0.6, 0.0, 0.0, 0.6, 0.0, 0.0, 0.0, 0.0, 0.4, 0.6, 0.0, 0.0, 0.0, 0.6, 1.0, 0.0, 0.0, 0.0, 0},
                new double[]{0.0, 0.0, 0.0, 1.0, 0.2, 0.6, 0.0, 0.0, 0.6, 0.0, 0.0, 0.6, 0.4, 0.0, 0.0, 0.0, 0.6, 0.6, 0.0, 0.0, 0.0, 0.8, 1.0, 1.0, 0.2, 0.0, 0},
                new double[]{0.0, 0.0, 0.0, 1.0, 0.6, 1.0, 0.4, 0.4, 1.0, 0.0, 0.2, 1.0, 0.6, 0.4, 0.0, 0.0, 0.8, 1.0, 0.2, 0.0, 0.2, 1.0, 1.0, 0.8, 1.0, 0.0, 0},
                new double[]{0.8, 0.2, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8, 1.0, 1.0, 1.0, 1.0, 0.2, 0.8, 1.0, 1.0, 1.0, 0.2, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0},
                new double[]{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1},
        };
        var distribution = smaaEfficiency.peoi(data);

        IntStream.range(0, expectedDistribution.length)
                .forEach(rowIdx -> Assertions.assertArrayEquals(expectedDistribution[rowIdx],
                        TestUtils.tranformTableToArray(distribution)[rowIdx], 1e-6));

    }

}
